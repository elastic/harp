// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
package container

import (
	"bytes"
	"testing"

	"github.com/awnumar/memguard"
	"github.com/stretchr/testify/assert"
)

func TestGenerateKey(t *testing.T) {
	t.Run("deterministic", func(t *testing.T) {
		pub, pk, err := GenerateKey(
			WithDeterministicKey(memguard.NewBufferFromBytes([]byte("deterministic-seed-for-test-00001")), "Release 64"),
		)
		assert.NoError(t, err)
		assert.NotNil(t, pk)
		assert.Equal(t, [32]byte{0x8d, 0xa5, 0x56, 0x9c, 0x1d, 0xc3, 0xf7, 0x83, 0x3, 0xff, 0x54, 0x1b, 0x2a, 0x3f, 0xcb, 0x3a, 0xbb, 0x88, 0x9f, 0x91, 0x9, 0x93, 0xdf, 0xfc, 0xc7, 0x25, 0x8b, 0xeb, 0xfe, 0x27, 0x95, 0x2b}, *pk)
		assert.NotNil(t, pub)
		assert.Equal(t, [32]byte{0x77, 0xd8, 0x26, 0xf1, 0x0, 0xf3, 0x1d, 0x5c, 0xab, 0x5, 0x15, 0x3e, 0x19, 0xa0, 0xc4, 0xa, 0x17, 0xcb, 0x5c, 0x20, 0x2f, 0xa7, 0x19, 0x26, 0xc6, 0x63, 0x23, 0x75, 0x98, 0x2d, 0xc7, 0x4d}, *pub)
	})

	t.Run("deterministic - same key with different target", func(t *testing.T) {
		pub, pk, err := GenerateKey(
			WithDeterministicKey(memguard.NewBufferFromBytes([]byte("deterministic-seed-for-test-00001")), "Release 65"),
		)
		assert.NoError(t, err)
		assert.NotNil(t, pk)
		assert.Equal(t, [32]byte{0x42, 0x59, 0x8a, 0xbb, 0xe3, 0xdc, 0xf5, 0x3b, 0xc4, 0x8, 0xd3, 0x2d, 0x11, 0x61, 0x66, 0xc0, 0x68, 0xb7, 0xce, 0xbd, 0xf1, 0x18, 0x59, 0x30, 0x26, 0x20, 0x56, 0xb9, 0x4b, 0x25, 0xfb, 0xc0}, *pk)
		assert.NotNil(t, pub)
		assert.Equal(t, [32]byte{0x58, 0x6a, 0xd, 0x2c, 0x80, 0x56, 0xb3, 0xe, 0x44, 0xcf, 0x4e, 0xec, 0x5a, 0x21, 0x91, 0xd0, 0xb0, 0xa, 0xc9, 0x5e, 0xf2, 0x8, 0x5c, 0x34, 0x42, 0xa9, 0x12, 0x3b, 0xb, 0xc7, 0xd0, 0x43}, *pub)
	})

	t.Run("master key too short", func(t *testing.T) {
		pub, pk, err := GenerateKey(
			WithDeterministicKey(memguard.NewBufferFromBytes([]byte("determini")), "Release 64"),
		)
		assert.Error(t, err)
		assert.Nil(t, pk)
		assert.Nil(t, pub)
	})

	t.Run("default with given random source", func(t *testing.T) {
		pub, pk, err := GenerateKey(WithRandom(bytes.NewReader([]byte("deterministic-seed-for-test-00001"))))
		assert.NoError(t, err)
		assert.NotNil(t, pk)
		assert.Equal(t, [32]byte{0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x73, 0x65, 0x65, 0x64, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x30, 0x30, 0x30, 0x30}, *pk)
		assert.NotNil(t, pub)
		assert.Equal(t, [32]byte{0xb1, 0x8a, 0x7d, 0xd2, 0x0, 0xb6, 0xf7, 0x22, 0x9f, 0x51, 0x4b, 0x6b, 0xe7, 0x4a, 0x4c, 0x47, 0x81, 0x5a, 0x7f, 0xb7, 0x37, 0x77, 0x8f, 0x98, 0x5f, 0x8c, 0x59, 0xb1, 0xbc, 0x0, 0xb3, 0x5d}, *pub)

	})

	t.Run("default", func(t *testing.T) {
		pub, pk, err := GenerateKey()
		assert.NoError(t, err)
		assert.NotNil(t, pk)
		assert.NotNil(t, pub)
	})
}
